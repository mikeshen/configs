"Begin dein Scripts--------------------------------------------------------
set nocompatible               " Be iMproved

let s:config_dir = $HOME . '/Development/configs'
let s:cache_dir = expand(s:config_dir . '/vim/cache')

set runtimepath+=/home/osboxes/Development/configs/vim/repos/github.com/Shougo/dein.vim
set rtp+=~/.fzf

call dein#begin(expand(s:config_dir . '/vim'))

" Let dein manage dein
call dein#add('Shougo/dein.vim')

" ADD OR REMOVE PLUGINS HERE

" 1. Utilities
call dein#add('Shougo/vimshell')                  " powerful shell immplemented in vim
call dein#add('tpope/vim-dispatch')               " execute make commands within vim
call dein#add('tpope/vim-eunuch')                 " vim sugar for UNIX plugins
call dein#add('xolox/vim-misc')                   " autoload vimscripts, needed for vim session
call dein#add('xolox/vim-session')                " extended better session management
" call dein#add('jpalardy/vim-slime')               " send text over tmux in repl-like way
call dein#add('vimwiki/vimwiki')                  " your personal notes / todos / markdown editor vim
call dein#add('vim-scripts/conque-GDB')           " your own GDB interface emulator in vim
call dein#add('vim-scripts/yankRing.vim')         " maintains previous yanks and deletes
call dein#add('mileszs/ack.vim')                  " smart and happy searching

" 2. UI / Themes / Color
call dein#add('flazz/vim-colorschemes')           " hundreds of colorschemes
call dein#add('vim-airline/vim-airline')          " vim-airline powerbar
call dein#add('vim-airline/vim-airline-themes')   " themes for vim-airline
call dein#add('edkolev/tmuxline.vim')             " tmux integration with vim-airline
" call dein#add('nathanaelkane/vim-indent-guides')  " indent guides for various languages
call dein#add('kien/rainbow_parentheses.vim')     " differing colors for stacked parentheses
call dein#add('Valloric/MatchTagAlways')           " highlight enclosing xml / html tags

" 3. Filesystem Navigation / Movement
call dein#add('ctrlpvim/ctrlp.vim')               " fast file finder
call dein#add('scrooloose/nerdtree')              " display a filesystem browser
call dein#add('junegunn/fzf.vim')                 " fzf vim plugin
call dein#add('christoomey/vim-tmux-navigator')   " jump between tmux panes and vim splits seamlessly
call dein#add('derekwyatt/vim-fswitch')           " swtich between .h and .cpp files at the press of a key
call dein#add('bogado/file-line')                 " file:line format when opening files
call dein#add('majutsushi/tagbar')                " displays tags in a window, ordered by scope
call dein#add('artnez/vim-wipeout')               " quickly remove all unopened buffers with :Wipeout
call dein#add('qpkorr/vim-bufkill')               " kill buffers without destroying panes
call dein#add('easymotion/vim-easymotion')        " easily jump around using labeled tags
call dein#add('tpope/vim-unimpaired')             " extremely useful [] bracket shortcuts
call dein#add('rhysd/clever-f.vim')               " smartly repeat f and F searches using the same keys
call dein#add('tmhedberg/matchit')                " extend % to work for tags

" 4. Editing
call dein#add('tpope/vim-commentary')             " minimimilistic commenting shortcuts
call dein#add('tpope/vim-surround')               " make quoting/tags replacement easier
call dein#add('tpope/vim-speeddating')            " easy increment dates with c-a, c-x
call dein#add('tpope/vim-repeat')                 " allow vim . repeasts for custom plugins
call dein#add('godlygeek/tabular')                " better editing for simple alignments
call dein#add('sjl/gundo.vim')                    " undo tree visualized
" call dein#add('terryma/vim-multiple-cursors')     " simulate multiple cursors from sublime
" call dein#add('Raimondi/delimitMate')             " automatic closing of quotes, parents, brackets

" 5. Version Control Integration
call dein#add('tpope/vim-fugitive')               " GIT integration
call dein#add('airblade/vim-gitgutter')           " display git information in the gutter
call dein#add('albfan/vim-timelapse')             " vim time differences between commits
call dein#add('chrisbra/vim-diff-enhanced')       " show different vim diff options
call dein#add('AndrewRadev/linediff.vim')          " perform difs on lines of code

" 6. Snippets
call dein#add('Shougo/neocomplete.vim')           " neocompletion w/ cache
call dein#add('SirVer/ultisnips')                 " snippet engine
call dein#add('honza/vim-snippets')               " snippets repo

call dein#end()

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts--------------------------------------------------------

" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                        __   __(_)_ __ ___
"                        \ \ / /| | '_ ` _ \
"                        |\ V / | | | | | | |
"                          \_/  |_|_| |_| |_|
"
" }

" Environment {

    " Identify platform {
        silent function! OSX()
            return has('macunix')
        endfunction
        silent function! LINUX()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction
        silent function! WINDOWS()
            return  (has('win32') || has('win64'))
        endfunction
    " }

    " Basics {
        if !WINDOWS()
            set shell=/bin/zsh
        endif
    " }

" }

" General {

    set background=dark         " Assume a dark background
    colorscheme gruvbox

    " Allow to trigger background
    function! ToggleBG()
        let s:tbg = &background
        " Inversion
        if s:tbg == "dark"
            set background=light
        else
            set background=dark
        endif
    endfunction

    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " Syntax highlighting
    set mouse=a                 " Automatically enable mouse usage
    set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8

    if has('unnamedplus')  " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else         " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif

    " Most prefer to automatically switch to the current file directory when
    " a new buffer is opened
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

    "set autowrite                       " Automatically write a file when leaving a modified buffer
    set shortmess+=WraoOtIT          " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    " set spell                           " Spell checking on
    set hidden                          " Allow buffer switching without saving
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
    set timeoutlen=500                  " time to give vim before key timeout
    set ttimeoutlen=0

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
    " Restore cursor to file position in previous editing session
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END

    " Setting up the directories {
        set backup                  " Backups are nice ...
        if has('persistent_undo')
            set undofile                " So is persistent undo ...
            set undolevels=1000         " Maximum number of changes that can be undone
            set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
        endif
    " }

" }

" Vim UI {

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode
    set cursorline                  " Highlight current line

    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    "highlight clear CursorLineNr    " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        " if !exists('g:override_spf13_bundles')
            " set statusline+=%{fugitive#statusline()} " Git Hotness
        " endif
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    set relativenumber              " relative numberline, nice when combined with number
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    " "set matchpairs+=<:>             " Match, to be used with %
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" }

" Formatting {

    set nowrap                      " Do not wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks

    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> | call StripTrailingWhitespace()
    "autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
    autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2

    autocmd BufNewFile,BufRead *.coffee set filetype=coffee

    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " Workaround vim-commentary for Haskell
    autocmd FileType haskell setlocal commentstring=--\ %s
    " Workaround broken colour highlighting in Haskell
    autocmd FileType haskell,rust setlocal nospell

" }

" Key (re)Mappings {

    let mapleader = ' '
    let maplocalleader = ';'

    " Easier moving in tabs and windows
    " The lines conflict with the default digraph mapping of <C-K>
    map <C-j> <C-W>j<C-W>
    map <C-k> <C-W>k<C-W>
    map <C-l> <C-W>l<C-W>
    map <C-h> <C-W>h<C-W>

    " Wrapped lines goes down/up to next row, rather than next line in file.
    noremap j gj
    noremap k gk

    " End/Start of line motion keys act relative to row/wrap width in the
    " presence of `:set wrap`, and relative to line for `:set nowrap`.
    " Default vim behaviour is to act relative to text line in both cases
    " If you prefer the default behaviour, add the following to your
    function! WrapRelativeMotion(key, ...)
        let vis_sel=""
        if a:0
            let vis_sel="gv"
        endif
        if &wrap
            execute "normal!" vis_sel . "g" . a:key
        else
            execute "normal!" vis_sel . a:key
        endif
    endfunction

    " Map g* keys in Normal, Operator-pending, and Visual+select
    noremap $ :call WrapRelativeMotion("$")<cr>
    noremap <End> :call WrapRelativeMotion("$")<cr>
    noremap 0 :call WrapRelativeMotion("0")<cr>
    noremap <Home> :call WrapRelativeMotion("0")<cr>
    noremap ^ :call WrapRelativeMotion("^")<cr>
    " Overwrite the operator pending $/<End> mappings from above
    " to force inclusive motion with :execute normal!
    onoremap $ v:call WrapRelativeMotion("$")<cr>
    onoremap <End> v:call WrapRelativeMotion("$")<cr>
    " Overwrite the Visual+select mode mappings from above
    " to ensure the correct vis_sel flag is passed to function
    vnoremap $ :<C-U>call WrapRelativeMotion("$", 1)<cr>
    vnoremap <End> :<C-U>call WrapRelativeMotion("$", 1)<cr>
    vnoremap 0 :<C-U>call WrapRelativeMotion("0", 1)<cr>
    vnoremap <Home> :<C-U>call WrapRelativeMotion("0", 1)<cr>
    vnoremap ^ :<C-U>call WrapRelativeMotion("^", 1)<cr>

    " Stupid shift key fixes
    if has("user_commands")
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>
        command! -bang WQA wqa<bang>
        command! -bang WQA wqa<bang>
        " command! -bang Wipeout :call Wipeout<bang>0
    endif

    cmap Tabe tabe

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    map <silent> <leader>/ :set invhlsearch<cr>

    " Find merge conflict markers
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<cr>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<cr>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Adjust viewports to the same size
    map <Leader>= <C-w>=

    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    map <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<cr>

    " Easier horizontal scrolling
    nmap zl zL
    nmap zh zH

    " USER KEYBINDING CHANGES

    " make p in visual mode replace the selected text with that in the yank register
    vnoremap p <Esc>:let current_reg = @"<cr>gvdi<C-R>=current_reg<cr><esc>

    " Toggle numbercolumn
    map <leader>n :set invnumber<cr> :set invrelativenumber<cr>

    " Quick search and replace using localleader
    map <localleaader>// q:i%s//g<esc>ba
    map <localleaader>/c q:i%s//gc<esc>bba

    " add split maxing / fullscreen mode
    nmap<leader>z :tab split<cr>

    " strip output of a file
    nmap <localleader>st :call StripTrailingWhitespace()<cr>

    " change cdpath to current file
    map <localleader>c :lcd %:p:h<cr>

    " fast escape with jk and kj
    inoremap jk <esc>l
    inoremap kj <esc>l
    inoremap JK <esc>l
    inoremap jK <esc>l
    inoremap Jk <esc>l
    inoremap KJ <esc>l
    inoremap kJ <esc>l
    inoremap Kj <esc>l

    " guetto bracket completion
    inoremap { {}<left>


    " easier record mode playback for the q register
    nnoremap Q @q

    "HJKL Resizing
    nnoremap J :resize +8<cr>
    nnoremap K :resize -8<cr>
    nnoremap H :vertical resize -8<cr>
    nnoremap L :vertical resize +8<cr>

    " fast Make
    map <leader>m :Make make<cr>
    " TODO more to come here!!!

    " fast saving + quit
    map <leader>w :w!<cr>
    map <leader>q :q<cr>
    map <leader><leader>q :BW<cr>

    " source vimrc very quickly
    map <leader><leader>v :source ~/.vimrc<cr>
    map <leader>c :tabnew<cr>:e ~/.vimrc<cr>

    " fast splits
    map <leader>s :split<cr>
    map <leader>v :vsplit<cr>

    " change through buffers with <tab> <Shift-tab>
    nnoremap <tab> :bnext<cr>
    nnoremap <S-tab> :bprevious<cr>
    nnoremap <localleader>f :bnext<cr>
    nnoremap <localleader>d :bprevious<cr>

    " easier tab opening and closing
    map <leader>tn :tabnew<cr>
    map <leader>to :tabnew<cr>
    map <leader>tc :tabclose<cr>
    map <leader>tm :tabmove<cr>
    map <localleader>j gT
    map <localleader>k gT

    " Speed up scrolling of the viewport slightly
    nnoremap <C-e> 2<C-e>
    nnoremap <C-y> 2<C-y>
" }

" Plugins {

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " 1 Utilities
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " vim session {
        let g:session_autosave = 'no'
        let g:session_autoload = 'no'
        nmap <localleader>sd :DeleteSession! 
        nmap <localleader>ss :SaveSession! 
        nmap <localleader>so :OpenSession! 
    " }

    " vim-wiki {
        nnoremap <localleader>s :VimwikiToggleListItem<cr>
    " }

    " yankRing {
        nnoremap <silent> <localleader>p :YRShow<cr>
    " }

    " Ack/Ag THE SILVER SEARCHER {
        if executable('ag')
            let g:ackprg = 'ag --vimgrep'
        endif

        " search shortcuts
        nmap <localleader>a :Ack! --ignore={.git,.svn} -SRi -w <C-r><C-w><cr>
        " nmap <localleader>g :Ack! --ignore={.git,.svn} -SRi {nearest git dir here} <esc>lxBi
    " }

    " Ctags {
        set tags=./tags;/,~/.vimtags

        " ctags prompt behavior
        noremap <C-]> g<C-]>
    " }

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " 2 UI / Themes / Color
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " vim-colorscheme {
      if !has('gui_running')
        set t_Co=256      " set terminal colors to 256
        set t_ut=         " use the background color of the terminal
        if &termencoding == ""
          let &termencoding = &encoding
        endif
      endif
    " }

    " vim-airline / vim-airline-themes {
        let g:airline_theme='papercolor'
        let g:airline_powerline_fonts = 1
        let g:airline#extensions#tabline#enabled = 1
    " }

    " rainbow_parentheses {
        let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
        \ ]
        let g:rbpt_max = 16
        au VimEnter * RainbowParenthesesToggle
        au Syntax * RainbowParenthesesLoadRound
        au Syntax * RainbowParenthesesLoadSquare
        au Syntax * RainbowParenthesesLoadBraces
    " }
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " 3 Filesystem Navigation / Movement
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " CtrlP {
        let g:ctrlp_show_hidden = 1
        let g:ctrlp_working_path_mode = 'r' " use the nearest git directory as the cwd:
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.o$\|\.vcxproj$\|\.d$' }

        if executable('ag')
            let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
        elseif executable('ack-grep')
            let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
        elseif executable('ack')
            let s:ctrlp_fallback = 'ack %s --nocolor -f'
        endif

        " manage buffers more easily with ctrlp
        map <leader>bp :CtrlP<cr>
        map <leader>bb :CtrlPBuffer<cr>
        map <leader>bm :CtrlPMixed<cr>
        map <leader>bs :CtrlPMRU<cr>
    " }

    " NERDtree {
        map <leader>e :NERDTreeToggle<cr>
        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=1
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
        let NERDTreeMinimalUI = 1
        let NERDTreeDirArrows = 1

        " Add spaces after comment delimiters by default
        let g:NERDSpaceDelims = 1

        " Use compact syntax for prettified multi-line comments
        let g:NERDCompactSexyComs = 1
    " }

    " FZF {
        nnoremap <localleader>oh :History:<cr>
        nnoremap <localleader>or :History<cr>
        nnoremap <localleader>of :Files<cr>
    " }

    " Fswitch {
        " switch between header/source file
        map <leader>u :FSHere<cr>
    " }

    " TagBar {
        nmap <F8> :TagbarToggle<cr>
    " }

    " Wipeout {
        map <leader>o :Wipeout<cr>
    " }

    " bufkill {
        map <leader><leader>q :BD<cr>
    " }

    " EasyMotion {
        nmap <leader>k <Plug>(easymotion-overwin-w)
    " }

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " 4 Editing
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " Tabular {
        vmap <leader>t :Tabularize /
    " }

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " 5 Version Control Integration
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " Fugitive GIT {
        map <leader>gd :Gdiff<cr>
        map <leader>gs :Gstatus<cr>
        map <leader>gb :Gblame<cr>
    " }

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " 6 Snippets
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " NeoComplete {
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0
        " Use neocomplete.
        let g:neocomplete#enable_at_startup = 1
        " Use smartcase.
        let g:neocomplete#enable_smart_case = 1
        " Set minimum syntax keyword length.
        let g:neocomplete#sources#syntax#min_keyword_length = 3

        " Define dictionary.
        let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ }

        " Define keyword.
        if !exists('g:neocomplete#keyword_patterns')
            let g:neocomplete#keyword_patterns = {}
        endif
        let g:neocomplete#keyword_patterns['default'] = '\h\w*'

        " Plugin key-mappings.
        inoremap <expr><C-g>     neocomplete#undo_completion()
        inoremap <expr><C-l>     neocomplete#complete_common_string()

        " Recommended key-mappings.
        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
          return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
          " For no inserting <CR> key.
          "return pumvisible() ? "\<C-y>" : "\<CR>"
        endfunction
        " <TAB>: completion.
        inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        " <C-h>, <BS>: close popup and delete backword char.
        inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
        inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
        " Close popup by <Space>.
        "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

        " AutoComplPop like behavior.
        "let g:neocomplete#enable_auto_select = 1

        " Enable omni completion.
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

        " Enable heavy omni completion.
        if !exists('g:neocomplete#sources#omni#input_patterns')
          let g:neocomplete#sources#omni#input_patterns = {}
        endif
        "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
        let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
        let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    " }

    " UltiSnips {
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        let g:UltiSnipsExpandTrigger="<c-l>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"
    " }

" }

" Functions {

    " Initialize directories {
    function! InitializeDirectories()
        let parent = $HOME
        let prefix = '/Development/configs/vim/cache/'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        let common_dir = parent . prefix

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                exec "set " . settingname . "=" . directory . "//"
            endif
        endfor
    endfunction
    call InitializeDirectories()
    " }

    " Strip whitespace {
    function! StripTrailingWhitespace()
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " do the business:
        %s/\s\+$//e
        " clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction
    " }

    " Shell command {
    function! s:RunShellCommand(cmdline)
        botright new

        setlocal buftype=nofile
        setlocal bufhidden=delete
        setlocal nobuflisted
        setlocal noswapfile
        setlocal nowrap
        setlocal filetype=shell
        setlocal syntax=shell

        call setline(1, a:cmdline)
        call setline(2, substitute(a:cmdline, '.', '=', 'g'))
        execute 'silent $read !' . escape(a:cmdline, '%#')
        setlocal nomodifiable
        1
    endfunction

    command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
    " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
    " }

    function! s:ExpandFilenameAndExecute(command, file)
        execute a:command . " " . expand(a:file, ":p")
    endfunction

" }
